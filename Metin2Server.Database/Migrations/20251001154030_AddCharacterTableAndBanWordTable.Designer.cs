// <auto-generated />
using System;
using Metin2Server.Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Metin2Server.Database.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20251001154030_AddCharacterTableAndBanWordTable")]
    partial class AddCharacterTableAndBanWordTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Metin2Server.Domain.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("Empire")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("empire");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_login");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.Property<string>("PrivateCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("private_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_account");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_account_email");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("ix_account_login");

                    b.ToTable("account", "account");
                });

            modelBuilder.Entity("Metin2Server.Domain.Entities.BannedWord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("archived");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("archived_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("word");

                    b.HasKey("Id")
                        .HasName("pk_banned_word");

                    b.ToTable("banned_word", "common");
                });

            modelBuilder.Entity("Metin2Server.Domain.Entities.Character", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<byte>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("index");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("job");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("name");

                    b.Property<byte>("PartBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("part_base");

                    b.Property<int>("PartHair")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("part_hair");

                    b.Property<int>("PartMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("part_main");

                    b.Property<byte>("SkillGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("skill_group");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_character");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_character_account_id");

                    b.ToTable("character", "character");
                });

            modelBuilder.Entity("Metin2Server.Domain.Entities.CharacterQuickSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");

                    b.Property<byte>("Position")
                        .HasColumnType("smallint")
                        .HasColumnName("position");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_quick_slot");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_quick_slot_character_id");

                    b.ToTable("quick_slot", "character");
                });

            modelBuilder.Entity("Metin2Server.Domain.Entities.CharacterSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");

                    b.Property<byte>("Level")
                        .HasColumnType("smallint")
                        .HasColumnName("level");

                    b.Property<string>("MasterType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("master_type");

                    b.Property<int>("NextRead")
                        .HasColumnType("integer")
                        .HasColumnName("next_read");

                    b.HasKey("Id")
                        .HasName("pk_skill");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_skill_character_id");

                    b.ToTable("skill", "character");
                });

            modelBuilder.Entity("Metin2Server.Domain.Entities.Character", b =>
                {
                    b.HasOne("Metin2Server.Domain.Entities.Account", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_account_account_id");

                    b.OwnsOne("Metin2Server.Domain.Entities.Character+CoordinatesInfo", "Coordinates", b1 =>
                        {
                            b1.Property<long>("CharacterId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<byte>("Dir")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("smallint")
                                .HasDefaultValue((byte)0)
                                .HasColumnName("coordinates_dir");

                            b1.Property<long?>("ExitMapIndex")
                                .HasColumnType("bigint")
                                .HasColumnName("coordinates_exit_map_index");

                            b1.Property<int?>("ExitX")
                                .HasColumnType("integer")
                                .HasColumnName("coordinates_exit_x");

                            b1.Property<int?>("ExitY")
                                .HasColumnType("integer")
                                .HasColumnName("coordinates_exit_y");

                            b1.Property<long?>("MapIndex")
                                .HasColumnType("bigint")
                                .HasColumnName("coordinates_map_index");

                            b1.Property<int>("X")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("coordinates_x");

                            b1.Property<int>("Y")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("coordinates_y");

                            b1.Property<int>("Z")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("coordinates_z");

                            b1.HasKey("CharacterId");

                            b1.ToTable("character", "character");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_character_character_id");
                        });

                    b.OwnsOne("Metin2Server.Domain.Entities.Character+HorseStatisticsInfo", "HorseStatistics", b1 =>
                        {
                            b1.Property<long>("CharacterId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<short>("Health")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("smallint")
                                .HasDefaultValue((short)0)
                                .HasColumnName("horse_statistics_health");

                            b1.Property<int>("HealthDropTime")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("horse_statistics_health_drop_time");

                            b1.Property<byte>("Level")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("smallint")
                                .HasDefaultValue((byte)0)
                                .HasColumnName("horse_statistics_level");

                            b1.Property<bool>("Riding")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false)
                                .HasColumnName("horse_statistics_riding");

                            b1.Property<short>("Stamina")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("smallint")
                                .HasDefaultValue((short)0)
                                .HasColumnName("horse_statistics_stamina");

                            b1.HasKey("CharacterId");

                            b1.ToTable("character", "character");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_character_character_id");
                        });

                    b.OwnsOne("Metin2Server.Domain.Entities.Character+StatisticsInfo", "Statistics", b1 =>
                        {
                            b1.Property<long>("CharacterId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<int>("Alignment")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_alignment");

                            b1.Property<int>("Dx")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_dx");

                            b1.Property<long>("Exp")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasDefaultValue(0L)
                                .HasColumnName("statistics_exp");

                            b1.Property<long>("Gold")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasDefaultValue(0L)
                                .HasColumnName("statistics_gold");

                            b1.Property<int>("HorseSkillPoint")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_horse_skill_point");

                            b1.Property<int>("Hp")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_hp");

                            b1.Property<int>("Ht")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_ht");

                            b1.Property<int>("Iq")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_iq");

                            b1.Property<byte>("Level")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("smallint")
                                .HasDefaultValue((byte)0)
                                .HasColumnName("statistics_level");

                            b1.Property<byte>("LevelStep")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("smallint")
                                .HasDefaultValue((byte)0)
                                .HasColumnName("statistics_level_step");

                            b1.Property<long>("PlayTime")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasDefaultValue(0L)
                                .HasColumnName("statistics_play_time");

                            b1.Property<int>("RandomHp")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_random_hp");

                            b1.Property<int>("RandomSp")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_random_sp");

                            b1.Property<int>("SkillPoint")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_skill_point");

                            b1.Property<int>("Sp")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_sp");

                            b1.Property<int>("St")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_st");

                            b1.Property<int>("Stamina")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_stamina");

                            b1.Property<int>("StatPoint")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_stat_point");

                            b1.Property<int>("StatResetCount")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_stat_reset_count");

                            b1.Property<int>("SubSkillPoint")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("statistics_sub_skill_point");

                            b1.HasKey("CharacterId");

                            b1.ToTable("character", "character");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_character_character_id");
                        });

                    b.Navigation("Account");

                    b.Navigation("Coordinates")
                        .IsRequired();

                    b.Navigation("HorseStatistics")
                        .IsRequired();

                    b.Navigation("Statistics")
                        .IsRequired();
                });

            modelBuilder.Entity("Metin2Server.Domain.Entities.CharacterQuickSlot", b =>
                {
                    b.HasOne("Metin2Server.Domain.Entities.Character", "Character")
                        .WithMany("QuickSlots")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quick_slot_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Metin2Server.Domain.Entities.CharacterSkill", b =>
                {
                    b.HasOne("Metin2Server.Domain.Entities.Character", "Character")
                        .WithMany("Skills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_skill_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Metin2Server.Domain.Entities.Account", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Metin2Server.Domain.Entities.Character", b =>
                {
                    b.Navigation("QuickSlots");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
